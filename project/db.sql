/******************************************************************************/
/*            Generated by IBExpert 2018.8.3.1 12.10.2018 19:03:26            */
/******************************************************************************/

/******************************************************************************/
/*        Following SET SQL DIALECT is just for the Database Comparer         */
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR GEN_CASHFLOW_ID;
SET GENERATOR GEN_CASHFLOW_ID TO 174;

CREATE GENERATOR GEN_CONTRACTS_ID;
SET GENERATOR GEN_CONTRACTS_ID TO 109;

CREATE GENERATOR GEN_HOSES_ID;
SET GENERATOR GEN_HOSES_ID TO 914;

CREATE GENERATOR GEN_INCOMESBYDISCHARGE_ID;
SET GENERATOR GEN_INCOMESBYDISCHARGE_ID TO 97;

CREATE GENERATOR GEN_INOUTGSM_ID;
SET GENERATOR GEN_INOUTGSM_ID TO 496;

CREATE GENERATOR GEN_INPUTGSM_ID;
SET GENERATOR GEN_INPUTGSM_ID TO 0;

CREATE GENERATOR GEN_IOTANKSHOSES_ID;
SET GENERATOR GEN_IOTANKSHOSES_ID TO 56;

CREATE GENERATOR GEN_ITEMOUTCOMESBYRETAIL_ID;
SET GENERATOR GEN_ITEMOUTCOMESBYRETAIL_ID TO 24;

CREATE GENERATOR GEN_ITEMRESTS_ID;
SET GENERATOR GEN_ITEMRESTS_ID TO 108;

CREATE GENERATOR GEN_ORDERS_ID;
SET GENERATOR GEN_ORDERS_ID TO 217454;

CREATE GENERATOR GEN_OUTCOMESBYCOUPON_ID;
SET GENERATOR GEN_OUTCOMESBYCOUPON_ID TO 29;

CREATE GENERATOR GEN_OUTCOMESBYOFFICE_ID;
SET GENERATOR GEN_OUTCOMESBYOFFICE_ID TO 1855;

CREATE GENERATOR GEN_OUTCOMESBYRETAIL_ID;
SET GENERATOR GEN_OUTCOMESBYRETAIL_ID TO 2764;

CREATE GENERATOR GEN_SESSIONS_ID;
SET GENERATOR GEN_SESSIONS_ID TO 218;

CREATE GENERATOR GEN_TABLESLIST_ID;
SET GENERATOR GEN_TABLESLIST_ID TO 12;

CREATE GENERATOR GEN_TANKS_ID;
SET GENERATOR GEN_TANKS_ID TO 429;

CREATE GENERATOR GEN_TDB_ITEMS_ID;
SET GENERATOR GEN_TDB_ITEMS_ID TO 21;

CREATE GENERATOR GEN_TECHRETURN_ID;
SET GENERATOR GEN_TECHRETURN_ID TO 131;

CREATE GENERATOR GEN_TRADEDOCSINBILL_ID;
SET GENERATOR GEN_TRADEDOCSINBILL_ID TO 12;

CREATE GENERATOR GEN_USERS_ID;
SET GENERATOR GEN_USERS_ID TO 1;

CREATE GENERATOR INOUTGSM;
SET GENERATOR INOUTGSM TO 0;



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE CALCINCOMES (
    SESSION_ID INTEGER NOT NULL,
    TANKNUM VARCHAR(10) NOT NULL)
RETURNS (
    VOLUME DOUBLE PRECISION NOT NULL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CALCOUTCOMES (
    SESSION_ID INTEGER NOT NULL,
    TANKNUM VARCHAR(10) NOT NULL,
    HOSENUM INTEGER NOT NULL)
RETURNS (
    VOLUME DOUBLE PRECISION NOT NULL)
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE CASHFLOW (
    ID           INTEGER NOT NULL,
    SESSION_ID   INTEGER NOT NULL,
    DOCTYPEID    INTEGER NOT NULL,
    DOCTYPENAME  VARCHAR(50),
    CASHID       INTEGER NOT NULL,
    CASHNAME     VARCHAR(50),
    REMARK       VARCHAR(10),
    AMOUNT       DOUBLE PRECISION NOT NULL
);

CREATE TABLE CONTRACTS (
    ID            INTEGER NOT NULL,
    NOMER         VARCHAR(128),
    PARTNER_CODE  VARCHAR(12) NOT NULL,
    NAME          VARCHAR(100)
);

CREATE TABLE CONTRAGENTS (
    CODE  VARCHAR(12) NOT NULL,
    NAME  VARCHAR(100)
);

CREATE TABLE FIRMS (
    CODE  VARCHAR(10) NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE HOSES (
    ID            SMALLINT NOT NULL,
    SESSION_ID    INTEGER NOT NULL,
    HOSENUM       INTEGER NOT NULL,
    STARTCOUNTER  DOUBLE PRECISION NOT NULL,
    ENDCOUNTER    DOUBLE PRECISION NOT NULL,
    PUMPNUM       INTEGER NOT NULL,
    NUMINPUMP     INTEGER NOT NULL,
    HOSETYPE      VARCHAR(16),
    TANKNUM       VARCHAR(10)
);

CREATE TABLE INCOMESBYDISCHARGE (
    ID              INTEGER NOT NULL,
    SESSION_ID      INTEGER NOT NULL,
    ODT             TIMESTAMP NOT NULL,
    DOCNUMBER       VARCHAR(12),
    DOCCARNUMBER    VARCHAR(10),
    TANKNUM         VARCHAR(10),
    FUELNAME        VARCHAR(100),
    FUELEXTCODE     VARCHAR(11) NOT NULL,
    DENSITY         DOUBLE PRECISION NOT NULL,
    MASS            DOUBLE PRECISION NOT NULL,
    VOLUME          DOUBLE PRECISION NOT NULL,
    DISCREPANCY     DOUBLE PRECISION,
    PRICE           DOUBLE PRECISION,
    DOCTEMPERATURE  DOUBLE PRECISION,
    PARTNERNAME     VARCHAR(50),
    PARTNEREXTCODE  VARCHAR(12) NOT NULL
);

CREATE TABLE INOUTGSM (
    ID            INTEGER NOT NULL,
    SESSION_ID    INTEGER NOT NULL,
    TBL           VARCHAR(3) NOT NULL,
    DIRECTION     INTEGER NOT NULL,
    CLIENT_CODE   VARCHAR(12) NOT NULL,
    CONTRACT_ID   INTEGER NOT NULL,
    PAYMENT_CODE  VARCHAR(10) NOT NULL,
    WARE_CODE     VARCHAR(11) NOT NULL,
    AMOUNT        DOUBLE PRECISION NOT NULL,
    EI            VARCHAR(10),
    VOLUME        DOUBLE PRECISION NOT NULL,
    DENSITY       DOUBLE PRECISION NOT NULL,
    PRICE         DOUBLE PRECISION NOT NULL,
    SUMM          DOUBLE PRECISION NOT NULL,
    NDS           VARCHAR(10) NOT NULL,
    WHOLE         DOUBLE PRECISION NOT NULL,
    LASTUSER_ID   INTEGER NOT NULL,
    UPDATED_AT    TIMESTAMP NOT NULL,
    STATE         INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE IOTANKSHOSES (
    ID               INTEGER NOT NULL,
    SESSION_ID       INTEGER NOT NULL,
    TANKNUM          VARCHAR(10) NOT NULL,
    STARTFUELVOLUME  DOUBLE PRECISION NOT NULL,
    ENDFACTVOLUME    DOUBLE PRECISION NOT NULL,
    DENSITY          DOUBLE PRECISION NOT NULL,
    TEMPERATURE      DOUBLE PRECISION NOT NULL,
    HEIGHT           DOUBLE PRECISION NOT NULL,
    MASS             DOUBLE PRECISION NOT NULL,
    WATER            DOUBLE PRECISION NOT NULL,
    DEADREST         DOUBLE PRECISION NOT NULL,
    DEADRESTLITER    DOUBLE PRECISION NOT NULL,
    WARECODE         VARCHAR(11) NOT NULL,
    HOSENUM          INTEGER NOT NULL,
    STARTCOUNTER     DOUBLE PRECISION NOT NULL,
    ENDCOUNTER       DOUBLE PRECISION NOT NULL,
    PUMPNUM          INTEGER,
    NUMINPUMP        INTEGER,
    HOSETYPE         VARCHAR(16),
    LASTUSER_ID      INTEGER NOT NULL,
    UPDATED_AT       TIMESTAMP NOT NULL,
    STATE            INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE ITEMOUTCOMESBYRETAIL (
    ID                  INTEGER NOT NULL,
    SESSION_ID          INTEGER NOT NULL,
    ITEMNAME            VARCHAR(100),
    ITEMEXTCODE         VARCHAR(16) NOT NULL,
    ITEMGROUP           VARCHAR(20) NOT NULL,
    ITEMGRPEXTCODE      VARCHAR(16) NOT NULL,
    ISSERVICE           SMALLINT DEFAULT 0 NOT NULL,
    PAYMENTMODENAME     VARCHAR(50),
    PAYMENTMODEEXTCODE  VARCHAR(10) NOT NULL,
    PARTNERNAME         VARCHAR(100),
    PARTNEREXTCODE      VARCHAR(12) NOT NULL,
    PARTNERINN          VARCHAR(20),
    ITEMID              INTEGER NOT NULL,
    NDS                 VARCHAR(10) NOT NULL,
    UNIT                VARCHAR(10) NOT NULL,
    FRDEPARTMENT        VARCHAR(50),
    "HASH"              VARCHAR(48),
    ITEMCODE            VARCHAR(16) NOT NULL,
    ISRETURN            SMALLINT DEFAULT 0 NOT NULL,
    QUANTITY            INTEGER NOT NULL,
    AMOUNT              DOUBLE PRECISION NOT NULL,
    PRICEFASTTRADE      DOUBLE PRECISION NOT NULL,
    PRICEIN             DOUBLE PRECISION NOT NULL,
    PRICERETAIL         DOUBLE PRECISION NOT NULL
);

CREATE TABLE ITEMRESTS (
    ID              INTEGER NOT NULL,
    SESSION_ID      INTEGER NOT NULL,
    ITEMREST        INTEGER NOT NULL,
    STORAGEEXTCODE  VARCHAR(10) NOT NULL,
    STORAGENAME     VARCHAR(50),
    ITEMEXTCODE     VARCHAR(16) NOT NULL,
    ITEMNAME        VARCHAR(100),
    ITEMCODE        VARCHAR(16) NOT NULL
);

CREATE TABLE ITEMS (
    CODE   VARCHAR(16) NOT NULL,
    NAME   VARCHAR(100) NOT NULL,
    ICODE  VARCHAR(16)
);

CREATE TABLE ORDERS (
    ID          INTEGER NOT NULL,
    AZSCODE     VARCHAR(10) NOT NULL,
    SESSION     INTEGER NOT NULL,
    ODT         TIMESTAMP NOT NULL,
    ORDERNUM    INTEGER NOT NULL,
    PUMPNUM     INTEGER NOT NULL,
    TANKSNUM    VARCHAR(10),
    FUELPRICE   DOUBLE PRECISION NOT NULL,
    FUELVOLUME  DOUBLE PRECISION NOT NULL,
    FUELAMOUNT  DOUBLE PRECISION NOT NULL,
    FILENAME    VARCHAR(255) NOT NULL,
    FUELEXCODE  VARCHAR(11)
);

CREATE TABLE OUTCOMESBYCOUPON (
    ID              INTEGER NOT NULL,
    SESSION_ID      INTEGER NOT NULL,
    ODT             TIMESTAMP NOT NULL,
    SESSIONID       INTEGER NOT NULL,
    DOCID           VARCHAR(16),
    VOLUME          DOUBLE PRECISION NOT NULL,
    AMOUNT          DOUBLE PRECISION NOT NULL,
    COUPONCODE      VARCHAR(16) NOT NULL,
    COUPONFUELNAME  VARCHAR(100) NOT NULL,
    COUPONVOLUME    DOUBLE PRECISION NOT NULL,
    VOLUMEFACT      DOUBLE PRECISION NOT NULL,
    FUELEXTCODE     VARCHAR(11)
);

CREATE TABLE OUTCOMESBYOFFICE (
    ID                  INTEGER NOT NULL,
    SESSION_ID          INTEGER NOT NULL,
    ODT                 TIMESTAMP NOT NULL,
    TANKNUM             VARCHAR(10) NOT NULL,
    HOSENAME            VARCHAR(10),
    FUELNAME            VARCHAR(100),
    FUELEXTCODE         VARCHAR(11) NOT NULL,
    PAYMENTMODENAME     VARCHAR(50),
    PAYMENTMODEEXTCODE  VARCHAR(10) NOT NULL,
    REMARK              VARCHAR(10),
    VOLUME              DOUBLE PRECISION NOT NULL,
    AMOUNT              DOUBLE PRECISION NOT NULL,
    MASS                DOUBLE PRECISION,
    ORIGPRICE           DOUBLE PRECISION NOT NULL,
    HASORDER            SMALLINT NOT NULL
);

CREATE TABLE OUTCOMESBYRETAIL (
    ID                  INTEGER NOT NULL,
    SESSION_ID          INTEGER NOT NULL,
    TANKNUM             VARCHAR(10) NOT NULL,
    HOSENAME            VARCHAR(10),
    FUELNAME            VARCHAR(100),
    PAYMENTMODENAME     VARCHAR(50),
    AGENTNAME           VARCHAR(50),
    CARDCODE            VARCHAR(10),
    PARTNERNAME         VARCHAR(50),
    PARTNERINN          VARCHAR(20),
    FUELEXTCODE         VARCHAR(11) NOT NULL,
    PAYMENTMODEEXTCODE  VARCHAR(10) NOT NULL,
    AGENTEXTCODE        VARCHAR(10),
    PARTNEREXTCODE      VARCHAR(12),
    VOLUME              DOUBLE PRECISION NOT NULL,
    AMOUNT              DOUBLE PRECISION NOT NULL,
    MASS                DOUBLE PRECISION,
    ORIGPRICE           DOUBLE PRECISION NOT NULL,
    REMARK              VARCHAR(10),
    ORDERCOUNT          INTEGER
);

CREATE TABLE PAYMENTMODES (
    CODE  VARCHAR(10) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE SESSIONS (
    ID             INTEGER NOT NULL,
    AZSCODE        VARCHAR(10) NOT NULL,
    SESSIONNUM     INTEGER NOT NULL,
    STARTDATETIME  TIMESTAMP NOT NULL,
    ENDDATETIME    TIMESTAMP NOT NULL,
    USERNAME       VARCHAR(50)
);

CREATE TABLE STATIONS (
    CODE     VARCHAR(10) NOT NULL,
    NAME     VARCHAR(50),
    EXTCODE  VARCHAR(10) NOT NULL
);

CREATE TABLE STORAGES (
    CODE  VARCHAR(10) NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE TABLESLIST (
    ID         INTEGER NOT NULL,
    TABLENAME  VARCHAR(48) NOT NULL
);

CREATE TABLE TANKS (
    ID               SMALLINT NOT NULL,
    SESSION_ID       INTEGER NOT NULL,
    TANKNUM          VARCHAR(10) NOT NULL,
    ENDDENSITY       DOUBLE PRECISION NOT NULL,
    STARTFUELVOLUME  DOUBLE PRECISION NOT NULL,
    ENDFACTVOLUME    DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDTEMPERATURE   DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDHEIGHT        DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDMASS          DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDWATER         DOUBLE PRECISION DEFAULT 0,
    DEADREST         DOUBLE PRECISION DEFAULT 0 NOT NULL,
    DEADRESTLITER    DOUBLE PRECISION DEFAULT 0 NOT NULL,
    WARECODE         VARCHAR(11)
);

CREATE TABLE TDB_ITEMS (
    ID             INTEGER NOT NULL,
    BILL_ID        INTEGER NOT NULL,
    ITEMNAME       VARCHAR(100),
    ITEMEXTCODE    VARCHAR(16) NOT NULL,
    ITEMISSERVICE  SMALLINT NOT NULL,
    ITEMCODE       VARCHAR(16) NOT NULL,
    UNITNAME       VARCHAR(10),
    UNITEXTCODE    VARCHAR(10) NOT NULL,
    AMOUNT         DOUBLE PRECISION NOT NULL,
    QUANTITY       INTEGER NOT NULL,
    PRICE          DOUBLE PRECISION NOT NULL,
    NDSAMOUNT      DOUBLE PRECISION NOT NULL,
    TOTAL          DOUBLE PRECISION NOT NULL,
    NDSNAME        VARCHAR(10),
    NDSEXTCODE     VARCHAR(10) NOT NULL
);

CREATE TABLE TECHRETURN (
    ID           INTEGER NOT NULL,
    SESSION_ID   INTEGER NOT NULL,
    NUM          INTEGER NOT NULL,
    ODT          TIMESTAMP NOT NULL,
    FUELNAME     VARCHAR(100),
    FUELEXTCODE  VARCHAR(11) NOT NULL,
    TANKNUM      VARCHAR(10) NOT NULL,
    TANKEXTCODE  VARCHAR(10),
    VOLUME       DOUBLE PRECISION NOT NULL,
    MASS         DOUBLE PRECISION NOT NULL,
    DENSITY      DOUBLE PRECISION NOT NULL
);

CREATE TABLE TRADEDOCSINBILL (
    ID               INTEGER NOT NULL,
    SESSION_ID       INTEGER NOT NULL,
    INBILLHID        INTEGER NOT NULL,
    NDOC             VARCHAR(16) NOT NULL,
    DATEDOC          TIMESTAMP NOT NULL,
    PRICENAME        VARCHAR(50),
    PRICEEXTCODE     VARCHAR(10) NOT NULL,
    PARTNERNAME      VARCHAR(100),
    PARTNEREXTCODE   VARCHAR(12) NOT NULL,
    PARTNERINN       VARCHAR(20),
    PARTNERKPP       VARCHAR(20),
    STORAGESNAME     VARCHAR(50),
    STORAGESEXTCODE  VARCHAR(10) NOT NULL,
    FIRMSNAME        VARCHAR(50),
    FIRMSEXTCODE     VARCHAR(10) NOT NULL
);

CREATE TABLE USERS (
    ID          INTEGER NOT NULL,
    LOGIN       VARCHAR(24) NOT NULL,
    "PASSWORD"  VARCHAR(48) NOT NULL,
    FIO         VARCHAR(100),
    "ROLE"      INTEGER DEFAULT 0 NOT NULL,
    EMAIL       VARCHAR(64),
    "POSITION"  VARCHAR(20)
);

CREATE TABLE WARES (
    CODE  VARCHAR(11) NOT NULL,
    NAME  VARCHAR(100)
);

INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (1, 'OutcomesByOffice');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (2, 'OutcomesByRetail');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (3, 'IncomesByDischarge');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (4, 'ItemOutcomesByRetail');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (5, 'TradeDocsInBill');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (7, 'TechReturn');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (8, 'CashFlow');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (9, 'OutcomesByCoupon');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (10, 'ItemRests');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (11, 'Hoses');
INSERT INTO TABLESLIST (ID, TABLENAME) VALUES (12, 'Tanks');

COMMIT WORK;

INSERT INTO USERS (ID, LOGIN, "PASSWORD", FIO, "ROLE", EMAIL, "POSITION") VALUES (1, 'admin', '', 'admin', 1, 'none', 'admin');

COMMIT WORK;

INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('004', 'Александровская', '00-000001');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('001', 'Ильинская', '00-000003');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('002', 'Балезинская', '00-000002');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('003', 'Кизнерская', '00-000004');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('006', 'f', '00');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('005', 'Березовая', '00-000005');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('007', '007', 'Нет');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('009', 'Петросервис', '?');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('008', '008', '?');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('998', '998', '?');
INSERT INTO STATIONS (CODE, NAME, EXTCODE) VALUES ('999', '999', '?');

COMMIT WORK;



/******************************************************************************/
/*                             Unique constraints                             */
/******************************************************************************/

ALTER TABLE ORDERS ADD CONSTRAINT UNQ1_ORDERS UNIQUE (AZSCODE, ODT, PUMPNUM);


/******************************************************************************/
/*                                Primary keys                                */
/******************************************************************************/

ALTER TABLE CASHFLOW ADD CONSTRAINT PK_CASHFLOW PRIMARY KEY (ID);
ALTER TABLE CONTRACTS ADD CONSTRAINT PK_CONTRACTS PRIMARY KEY (ID);
ALTER TABLE CONTRAGENTS ADD CONSTRAINT PK_CONTRAGENTS PRIMARY KEY (CODE);
ALTER TABLE FIRMS ADD CONSTRAINT PK_FIRMS PRIMARY KEY (CODE);
ALTER TABLE HOSES ADD CONSTRAINT PK_HOSES PRIMARY KEY (ID);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT PK_INCOMESBYDISCHARGE PRIMARY KEY (ID);
ALTER TABLE INOUTGSM ADD CONSTRAINT PK_INOUTGSM PRIMARY KEY (ID);
ALTER TABLE IOTANKSHOSES ADD CONSTRAINT PK_IOTANKSHOSES PRIMARY KEY (ID);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT PK_ITEMOUTCOMESBYRETAIL PRIMARY KEY (ID);
ALTER TABLE ITEMRESTS ADD CONSTRAINT PK_ITEMRESTS PRIMARY KEY (ID);
ALTER TABLE ITEMS ADD CONSTRAINT PK_ITEMS PRIMARY KEY (CODE);
ALTER TABLE ORDERS ADD CONSTRAINT PK_ORDERS PRIMARY KEY (ID);
ALTER TABLE OUTCOMESBYCOUPON ADD CONSTRAINT PK_OUTCOMESBYCOUPON PRIMARY KEY (ID);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT PK_OUTCOMESBYOFFICE PRIMARY KEY (ID);
ALTER TABLE OUTCOMESBYRETAIL ADD PRIMARY KEY (ID);
ALTER TABLE PAYMENTMODES ADD CONSTRAINT PK_PAYMENTMODES PRIMARY KEY (CODE);
ALTER TABLE SESSIONS ADD PRIMARY KEY (ID);
ALTER TABLE STATIONS ADD CONSTRAINT PK_STATIONS PRIMARY KEY (CODE);
ALTER TABLE STORAGES ADD CONSTRAINT PK_STORAGES PRIMARY KEY (CODE);
ALTER TABLE TANKS ADD PRIMARY KEY (ID);
ALTER TABLE TDB_ITEMS ADD CONSTRAINT PK_TDB_ITEMS PRIMARY KEY (ID);
ALTER TABLE TECHRETURN ADD CONSTRAINT PK_TECHRETURN PRIMARY KEY (ID);
ALTER TABLE TRADEDOCSINBILL ADD CONSTRAINT PK_TRADEDOCSINBILL PRIMARY KEY (ID);
ALTER TABLE USERS ADD CONSTRAINT PK_USERS PRIMARY KEY (ID);
ALTER TABLE WARES ADD CONSTRAINT PK_WARES PRIMARY KEY (CODE);


/******************************************************************************/
/*                                Foreign keys                                */
/******************************************************************************/

ALTER TABLE CASHFLOW ADD CONSTRAINT FK_CASHFLOW_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE CONTRACTS ADD CONSTRAINT FK_CONTRACTS_1 FOREIGN KEY (PARTNER_CODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE HOSES ADD CONSTRAINT FK_HOSES_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT FK_INCOMESBYDISCHARGE_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT FK_INCOMESBYDISCHARGE_2 FOREIGN KEY (FUELEXTCODE) REFERENCES WARES (CODE);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT FK_INCOMESBYDISCHARGE_3 FOREIGN KEY (PARTNEREXTCODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE INOUTGSM ADD CONSTRAINT FK_INOUTGSM_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE INOUTGSM ADD CONSTRAINT FK_INOUTGSM_2 FOREIGN KEY (CLIENT_CODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE INOUTGSM ADD CONSTRAINT FK_INOUTGSM_3 FOREIGN KEY (CONTRACT_ID) REFERENCES CONTRACTS (ID) ON DELETE SET NULL ON UPDATE SET NULL;
ALTER TABLE INOUTGSM ADD CONSTRAINT FK_INOUTGSM_4 FOREIGN KEY (PAYMENT_CODE) REFERENCES PAYMENTMODES (CODE);
ALTER TABLE INOUTGSM ADD CONSTRAINT FK_INOUTGSM_5 FOREIGN KEY (WARE_CODE) REFERENCES WARES (CODE);
ALTER TABLE INOUTGSM ADD CONSTRAINT FK_INOUTGSM_6 FOREIGN KEY (LASTUSER_ID) REFERENCES USERS (ID);
ALTER TABLE IOTANKSHOSES ADD CONSTRAINT FK_IOTANKSHOSES_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE IOTANKSHOSES ADD CONSTRAINT FK_IOTANKSHOSES_2 FOREIGN KEY (WARECODE) REFERENCES WARES (CODE);
ALTER TABLE IOTANKSHOSES ADD CONSTRAINT FK_IOTANKSHOSES_3 FOREIGN KEY (LASTUSER_ID) REFERENCES USERS (ID);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_1 FOREIGN KEY (ITEMEXTCODE) REFERENCES ITEMS (CODE);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_2 FOREIGN KEY (PAYMENTMODEEXTCODE) REFERENCES PAYMENTMODES (CODE);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_3 FOREIGN KEY (PARTNEREXTCODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_4 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE ITEMRESTS ADD CONSTRAINT FK_ITEMRESTS_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE ITEMRESTS ADD CONSTRAINT FK_ITEMRESTS_2 FOREIGN KEY (STORAGEEXTCODE) REFERENCES STORAGES (CODE);
ALTER TABLE ITEMRESTS ADD CONSTRAINT FK_ITEMRESTS_3 FOREIGN KEY (ITEMEXTCODE) REFERENCES ITEMS (CODE);
ALTER TABLE OUTCOMESBYCOUPON ADD CONSTRAINT FK_OUTCOMESBYCOUPON_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT FK_OUTCOMESBYOFFICE_1 FOREIGN KEY (FUELEXTCODE) REFERENCES WARES (CODE);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT FK_OUTCOMESBYOFFICE_2 FOREIGN KEY (PAYMENTMODEEXTCODE) REFERENCES PAYMENTMODES (CODE);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT FK_OUTCOMESBYOFFICE_3 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_2 FOREIGN KEY (FUELEXTCODE) REFERENCES WARES (CODE);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_3 FOREIGN KEY (PAYMENTMODEEXTCODE) REFERENCES PAYMENTMODES (CODE);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_4 FOREIGN KEY (PARTNEREXTCODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE TANKS ADD CONSTRAINT FK_TANKS_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE TDB_ITEMS ADD CONSTRAINT FK_TDB_ITEMS_1 FOREIGN KEY (BILL_ID) REFERENCES TRADEDOCSINBILL (ID);
ALTER TABLE TDB_ITEMS ADD CONSTRAINT FK_TDB_ITEMS_2 FOREIGN KEY (ITEMEXTCODE) REFERENCES ITEMS (CODE);
ALTER TABLE TECHRETURN ADD CONSTRAINT FK_TECHRETURN_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE TECHRETURN ADD CONSTRAINT FK_TECHRETURN_2 FOREIGN KEY (FUELEXTCODE) REFERENCES WARES (CODE);
ALTER TABLE TRADEDOCSINBILL ADD CONSTRAINT FK_TRADEDOCSINBILL_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE TRADEDOCSINBILL ADD CONSTRAINT FK_TRADEDOCSINBILL_2 FOREIGN KEY (PARTNEREXTCODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE TRADEDOCSINBILL ADD CONSTRAINT FK_TRADEDOCSINBILL_3 FOREIGN KEY (STORAGESEXTCODE) REFERENCES STORAGES (CODE);
ALTER TABLE TRADEDOCSINBILL ADD CONSTRAINT FK_TRADEDOCSINBILL_4 FOREIGN KEY (FIRMSEXTCODE) REFERENCES FIRMS (CODE);


/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE UNIQUE INDEX SESSIONS_IDX1 ON SESSIONS (AZSCODE, SESSIONNUM, STARTDATETIME);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: CASHFLOW_BI */
CREATE TRIGGER CASHFLOW_BI FOR CASHFLOW
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_cashflow_id,1);
end
^

/* Trigger: CONTRACTS_BI */
CREATE TRIGGER CONTRACTS_BI FOR CONTRACTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_contracts_id,1);
end
^

/* Trigger: HOSES_BI */
CREATE TRIGGER HOSES_BI FOR HOSES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_hoses_id,1);
end
^

/* Trigger: INCOMESBYDISCHARGE_BI */
CREATE TRIGGER INCOMESBYDISCHARGE_BI FOR INCOMESBYDISCHARGE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_incomesbydischarge_id,1);
end
^

/* Trigger: INOUTGSM_BI */
CREATE TRIGGER INOUTGSM_BI FOR INOUTGSM
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_inoutgsm_id,1);
end
^

/* Trigger: IOTANKSHOSES_BI */
CREATE TRIGGER IOTANKSHOSES_BI FOR IOTANKSHOSES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_iotankshoses_id,1);
end
^

/* Trigger: ITEMOUTCOMESBYRETAIL_BI */
CREATE TRIGGER ITEMOUTCOMESBYRETAIL_BI FOR ITEMOUTCOMESBYRETAIL
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_itemoutcomesbyretail_id,1);
end
^

/* Trigger: ITEMRESTS_BI */
CREATE TRIGGER ITEMRESTS_BI FOR ITEMRESTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_itemrests_id,1);
end
^

/* Trigger: OBO_TRUNCCODES_BI */
CREATE TRIGGER OBO_TRUNCCODES_BI FOR OUTCOMESBYOFFICE
INACTIVE BEFORE INSERT POSITION 0
AS
    declare n int;
begin
  /* Trigger text */
  n = char_length(new.fuelextcode);
  if (:n > 11) then
  begin
    new.fuelextcode = substring(new.fuelextcode from (:n - 10) for 11);
  end
end
^

/* Trigger: OBR_TRUNCCODES_BI */
CREATE TRIGGER OBR_TRUNCCODES_BI FOR OUTCOMESBYRETAIL
INACTIVE BEFORE INSERT POSITION 0
AS
    declare n int;
begin
  /* Trigger text */
  n = char_length(new.fuelextcode);
  if (:n > 11) then
  begin
    new.fuelextcode = substring(new.fuelextcode from :n - 10 for 11);
  end
end
^

/* Trigger: ORDERS_BI */
CREATE TRIGGER ORDERS_BI FOR ORDERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_orders_id,1);
end
^

/* Trigger: OUTCOMESBYCOUPON_BI */
CREATE TRIGGER OUTCOMESBYCOUPON_BI FOR OUTCOMESBYCOUPON
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_outcomesbycoupon_id,1);
end
^

/* Trigger: OUTCOMESBYOFFICE_BI */
CREATE TRIGGER OUTCOMESBYOFFICE_BI FOR OUTCOMESBYOFFICE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_outcomesbyoffice_id,1);
end
^

/* Trigger: OUTCOMESBYRETAIL_BI */
CREATE TRIGGER OUTCOMESBYRETAIL_BI FOR OUTCOMESBYRETAIL
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_outcomesbyretail_id,1);
end
^

/* Trigger: SESSIONS_BI */
CREATE TRIGGER SESSIONS_BI FOR SESSIONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_sessions_id,1);
end
^

/* Trigger: TABLESLIST_BI */
CREATE TRIGGER TABLESLIST_BI FOR TABLESLIST
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tableslist_id,1);
end
^

/* Trigger: TANKS_BI */
CREATE TRIGGER TANKS_BI FOR TANKS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tanks_id,1);
end
^

/* Trigger: TDB_ITEMS_BI */
CREATE TRIGGER TDB_ITEMS_BI FOR TDB_ITEMS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tdb_items_id,1);
end
^

/* Trigger: TECHRETURN_BI */
CREATE TRIGGER TECHRETURN_BI FOR TECHRETURN
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_techreturn_id,1);
end
^

/* Trigger: TRADEDOCSINBILL_BI */
CREATE TRIGGER TRADEDOCSINBILL_BI FOR TRADEDOCSINBILL
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tradedocsinbill_id,1);
end
^

/* Trigger: USERS_BI */
CREATE TRIGGER USERS_BI FOR USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_users_id,1);
end
^
SET TERM ; ^



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE CALCINCOMES (
    SESSION_ID INTEGER NOT NULL,
    TANKNUM VARCHAR(10) NOT NULL)
RETURNS (
    VOLUME DOUBLE PRECISION NOT NULL)
AS
declare variable v double precision;
begin
    select sum(volume) from incomesbydischarge
            where session_id = :session_id
                and tanknum=:tanknum
    into :v;
    if (:v is null) then v = 0;

    volume = :v;
  suspend;
end^


ALTER PROCEDURE CALCOUTCOMES (
    SESSION_ID INTEGER NOT NULL,
    TANKNUM VARCHAR(10) NOT NULL,
    HOSENUM INTEGER NOT NULL)
RETURNS (
    VOLUME DOUBLE PRECISION NOT NULL)
AS
declare variable v double precision;
begin
    select sum(v) from
        (select sum(volume) as v from outcomesbyretail r
            where r.session_id = :session_id
                and r.tanknum=:tanknum
                and r.hosename=cast(:hosenum as varchar(10))
        /*  NO OFFICE!!!
        union all
        select sum(volume) as v from outcomesbyoffice
            where session_id = :session_id
                and tanknum=:tanknum
                and hosename=cast(:hosenum as varchar(10))
        */
        )
    into :v;
    if(:v is null)then v = 0;
    volume = :v;
    suspend;
end^



SET TERM ; ^



/******************************************************************************/
/*                            Fields descriptions                             */
/******************************************************************************/

DESCRIBE FIELD DIRECTION TABLE INOUTGSM
'0 - out  1 -in';

DESCRIBE FIELD CLIENT_CODE TABLE INOUTGSM
'fk to contragents';

DESCRIBE FIELD CONTRACT_ID TABLE INOUTGSM
'fk to contracts';

DESCRIBE FIELD PAYMENT_CODE TABLE INOUTGSM
'fk to paymentmodes';

DESCRIBE FIELD WARE_CODE TABLE INOUTGSM
'fk to wares';

DESCRIBE FIELD LASTUSER_ID TABLE INOUTGSM
'fk to users';

DESCRIBE FIELD STATE TABLE INOUTGSM
'0 - new 1 - in process 2 - completed';

DESCRIBE FIELD ITEMGRPEXTCODE TABLE ITEMOUTCOMESBYRETAIL
'" АЗС" + azscode';

DESCRIBE FIELD ITEMCODE TABLE ITEMOUTCOMESBYRETAIL
'icode in @items@';

DESCRIBE FIELD SESSIONID TABLE OUTCOMESBYCOUPON
'as in source xml';

DESCRIBE FIELD FUELEXTCODE TABLE OUTCOMESBYCOUPON
'только для справки, в исходнике нет кода';

DESCRIBE FIELD FUELNAME TABLE OUTCOMESBYRETAIL
'doubles, no need';

DESCRIBE FIELD PAYMENTMODENAME TABLE OUTCOMESBYRETAIL
'see table  paymentmodes';

DESCRIBE FIELD FUELEXTCODE TABLE OUTCOMESBYRETAIL
'link to wares, 1C ware code';

DESCRIBE FIELD PAYMENTMODEEXTCODE TABLE OUTCOMESBYRETAIL
'to table paymentmodes';

DESCRIBE FIELD PARTNEREXTCODE TABLE OUTCOMESBYRETAIL
'1C code, link to contragents';

DESCRIBE FIELD REMARK TABLE OUTCOMESBYRETAIL
'wtf?';

DESCRIBE FIELD "ROLE" TABLE USERS
'0 user 1 admin';

