/******************************************************************************/
/*            Generated by IBExpert 2018.8.3.1 28.09.2018 20:01:02            */
/******************************************************************************/

/******************************************************************************/
/*        Following SET SQL DIALECT is just for the Database Comparer         */
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR GEN_INCOMESBYDISCHARGE_ID;
SET GENERATOR GEN_INCOMESBYDISCHARGE_ID TO 1;

CREATE GENERATOR GEN_ITEMOUTCOMESBYRETAIL_ID;
SET GENERATOR GEN_ITEMOUTCOMESBYRETAIL_ID TO 4;

CREATE GENERATOR GEN_ORDERS_ID;
SET GENERATOR GEN_ORDERS_ID TO 73579;

CREATE GENERATOR GEN_OUTCOMESBYOFFICE_ID;
SET GENERATOR GEN_OUTCOMESBYOFFICE_ID TO 286;

CREATE GENERATOR GEN_OUTCOMESBYRETAIL_ID;
SET GENERATOR GEN_OUTCOMESBYRETAIL_ID TO 911;

CREATE GENERATOR GEN_SESSIONS_ID;
SET GENERATOR GEN_SESSIONS_ID TO 108;



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE CONTRAGENTS (
    CODE  VARCHAR(12) NOT NULL,
    NAME  VARCHAR(100)
);


CREATE TABLE HOSES (
    SESSION_ID    INTEGER NOT NULL,
    HOSENUM       INTEGER NOT NULL,
    STARTCOUNTER  DOUBLE PRECISION NOT NULL,
    ENDCOUNTER    DOUBLE PRECISION NOT NULL,
    PUMPNUM       INTEGER NOT NULL,
    NUMINPUMP     INTEGER NOT NULL,
    HOSETYPE      VARCHAR(16)
);


CREATE TABLE INCOMESBYDISCHARGE (
    ID              INTEGER NOT NULL,
    SESSION_ID      INTEGER NOT NULL,
    ODT             TIMESTAMP NOT NULL,
    DOCNUMBER       VARCHAR(12),
    DOCCARNUMBER    VARCHAR(10),
    TANKNUM         VARCHAR(10),
    FUELNAME        VARCHAR(100),
    FUELEXTCODE     VARCHAR(11) NOT NULL,
    DENSITY         DOUBLE PRECISION NOT NULL,
    MASS            DOUBLE PRECISION NOT NULL,
    VOLUME          DOUBLE PRECISION NOT NULL,
    DISCREPANCY     DOUBLE PRECISION,
    PRICE           DOUBLE PRECISION,
    DOCTEMPERATURE  DOUBLE PRECISION,
    PARTNERNAME     VARCHAR(50),
    PARTNEREXTCODE  VARCHAR(12) NOT NULL
);


CREATE TABLE ITEMOUTCOMESBYRETAIL (
    ID                  INTEGER NOT NULL,
    SESSION_ID          INTEGER NOT NULL,
    ITEMNAME            VARCHAR(100),
    ITEMEXTCODE         VARCHAR(16) NOT NULL,
    ITEMGROUP           VARCHAR(20) NOT NULL,
    ITEMGRPEXTCODE      VARCHAR(16) NOT NULL,
    ISSERVICE           SMALLINT DEFAULT 0 NOT NULL,
    PAYMENTMODENAME     VARCHAR(50),
    PAYMENTMODEEXTCODE  VARCHAR(10) NOT NULL,
    PARTNERNAME         VARCHAR(100),
    PARTNEREXTCODE      VARCHAR(12) NOT NULL,
    PARTNERINN          VARCHAR(20),
    ITEMID              INTEGER NOT NULL,
    NDS                 VARCHAR(10) NOT NULL,
    UNIT                VARCHAR(10) NOT NULL,
    FRDEPARTMENT        VARCHAR(50),
    "HASH"              VARCHAR(48),
    ITEMCODE            VARCHAR(16) NOT NULL,
    ISRETURN            SMALLINT DEFAULT 0 NOT NULL,
    QUANTITY            INTEGER NOT NULL,
    AMOUNT              DOUBLE PRECISION NOT NULL,
    PRICEFASTTRADE      DOUBLE PRECISION NOT NULL,
    PRICEIN             DOUBLE PRECISION NOT NULL,
    PRICERETAIL         DOUBLE PRECISION NOT NULL
);


CREATE TABLE ITEMS (
    CODE   VARCHAR(16) NOT NULL,
    NAME   VARCHAR(100) NOT NULL,
    ICODE  VARCHAR(16)
);


CREATE TABLE ORDERS (
    ID          INTEGER NOT NULL,
    AZSCODE     VARCHAR(10) NOT NULL,
    SESSION     INTEGER NOT NULL,
    ODT         TIMESTAMP NOT NULL,
    ORDERNUM    INTEGER NOT NULL,
    PUMPNUM     INTEGER NOT NULL,
    TANKSNUM    VARCHAR(10),
    FUELPRICE   DOUBLE PRECISION NOT NULL,
    FUELVOLUME  DOUBLE PRECISION NOT NULL,
    FUELAMOUNT  DOUBLE PRECISION NOT NULL,
    FILENAME    VARCHAR(255) NOT NULL,
    FUELEXCODE  VARCHAR(11)
);


CREATE TABLE OUTCOMESBYOFFICE (
    ID                  INTEGER NOT NULL,
    SESSION_ID          INTEGER NOT NULL,
    ODT                 TIMESTAMP NOT NULL,
    TANKNUM             VARCHAR(10) NOT NULL,
    HOSENAME            VARCHAR(10),
    FUELNAME            VARCHAR(100),
    FUELEXTCODE         VARCHAR(11) NOT NULL,
    PAYMENTMODENAME     VARCHAR(50),
    PAYMENTMODEEXTCODE  VARCHAR(10) NOT NULL,
    REMARK              VARCHAR(10),
    VOLUME              DOUBLE PRECISION NOT NULL,
    AMOUNT              DOUBLE PRECISION NOT NULL,
    MASS                DOUBLE PRECISION,
    ORIGPRICE           DOUBLE PRECISION NOT NULL,
    HASORDER            SMALLINT NOT NULL
);


CREATE TABLE OUTCOMESBYRETAIL (
    ID                  INTEGER NOT NULL,
    SESSION_ID          INTEGER NOT NULL,
    TANKNUM             VARCHAR(10) NOT NULL,
    HOSENAME            VARCHAR(10),
    FUELNAME            VARCHAR(100),
    PAYMENTMODENAME     VARCHAR(50),
    AGENTNAME           VARCHAR(50),
    CARDCODE            VARCHAR(10),
    PARTNERNAME         VARCHAR(50),
    PARTNERINN          VARCHAR(20),
    FUELEXTCODE         VARCHAR(11) NOT NULL,
    PAYMENTMODEEXTCODE  VARCHAR(10) NOT NULL,
    AGENTEXTCODE        VARCHAR(10),
    PARTNEREXTCODE      VARCHAR(12),
    VOLUME              DOUBLE PRECISION NOT NULL,
    AMOUNT              DOUBLE PRECISION NOT NULL,
    MASS                DOUBLE PRECISION,
    ORIGPRICE           DOUBLE PRECISION NOT NULL,
    REMARK              VARCHAR(10),
    ORDERCOUNT          INTEGER
);


CREATE TABLE PAYMENTMODES (
    CODE  VARCHAR(10) NOT NULL,
    NAME  VARCHAR(50)
);


CREATE TABLE SESSIONS (
    AZSCODE        VARCHAR(10) NOT NULL,
    SESSIONNUM     INTEGER NOT NULL,
    STARTDATETIME  TIMESTAMP NOT NULL,
    ENDDATETIME    TIMESTAMP NOT NULL,
    USERNAME       VARCHAR(50),
    ID             INTEGER NOT NULL
);


CREATE TABLE STATIONS (
    CODE     VARCHAR(10) NOT NULL,
    NAME     VARCHAR(50),
    EXTCODE  VARCHAR(10) NOT NULL
);


CREATE TABLE STORAGES (
    CODE  VARCHAR(10) NOT NULL,
    NAME  VARCHAR(50)
);


CREATE TABLE TANKS (
    SESSION_ID       INTEGER NOT NULL,
    TANKNUM          VARCHAR(10) NOT NULL,
    ENDDENSITY       DOUBLE PRECISION NOT NULL,
    STARTFUELVOLUME  DOUBLE PRECISION NOT NULL,
    ENDFACTVOLUME    DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDTEMPERATURE   DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDHEIGHT        DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDMASS          DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ENDWATER         DOUBLE PRECISION DEFAULT 0,
    DEADREST         DOUBLE PRECISION DEFAULT 0 NOT NULL,
    DEADRESTLITER    DOUBLE PRECISION DEFAULT 0 NOT NULL
);


CREATE TABLE WARES (
    CODE  VARCHAR(11) NOT NULL,
    NAME  VARCHAR(100)
);




/******************************************************************************/
/*                             Unique constraints                             */
/******************************************************************************/

ALTER TABLE ORDERS ADD CONSTRAINT UNQ1_ORDERS UNIQUE (AZSCODE, ODT, PUMPNUM);


/******************************************************************************/
/*                                Primary keys                                */
/******************************************************************************/

ALTER TABLE CONTRAGENTS ADD CONSTRAINT PK_CONTRAGENTS PRIMARY KEY (CODE);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT PK_INCOMESBYDISCHARGE PRIMARY KEY (ID);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT PK_ITEMOUTCOMESBYRETAIL PRIMARY KEY (ID);
ALTER TABLE ITEMS ADD CONSTRAINT PK_ITEMS PRIMARY KEY (CODE);
ALTER TABLE ORDERS ADD CONSTRAINT PK_ORDERS PRIMARY KEY (ID);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT PK_OUTCOMESBYOFFICE PRIMARY KEY (ID);
ALTER TABLE OUTCOMESBYRETAIL ADD PRIMARY KEY (ID);
ALTER TABLE PAYMENTMODES ADD CONSTRAINT PK_PAYMENTMODES PRIMARY KEY (CODE);
ALTER TABLE SESSIONS ADD PRIMARY KEY (ID);
ALTER TABLE STATIONS ADD CONSTRAINT PK_STATIONS PRIMARY KEY (CODE);
ALTER TABLE STORAGES ADD CONSTRAINT PK_STORAGES PRIMARY KEY (CODE);
ALTER TABLE WARES ADD CONSTRAINT PK_WARES PRIMARY KEY (CODE);


/******************************************************************************/
/*                                Foreign keys                                */
/******************************************************************************/

ALTER TABLE HOSES ADD CONSTRAINT FK_HOSES_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT FK_INCOMESBYDISCHARGE_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT FK_INCOMESBYDISCHARGE_2 FOREIGN KEY (FUELEXTCODE) REFERENCES WARES (CODE);
ALTER TABLE INCOMESBYDISCHARGE ADD CONSTRAINT FK_INCOMESBYDISCHARGE_3 FOREIGN KEY (PARTNEREXTCODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_1 FOREIGN KEY (ITEMEXTCODE) REFERENCES ITEMS (CODE);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_2 FOREIGN KEY (PAYMENTMODEEXTCODE) REFERENCES PAYMENTMODES (CODE);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_3 FOREIGN KEY (PARTNEREXTCODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE ITEMOUTCOMESBYRETAIL ADD CONSTRAINT FK_ITEMOUTCOMESBYRETAIL_4 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT FK_OUTCOMESBYOFFICE_1 FOREIGN KEY (FUELEXTCODE) REFERENCES WARES (CODE);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT FK_OUTCOMESBYOFFICE_2 FOREIGN KEY (PAYMENTMODEEXTCODE) REFERENCES PAYMENTMODES (CODE);
ALTER TABLE OUTCOMESBYOFFICE ADD CONSTRAINT FK_OUTCOMESBYOFFICE_3 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_2 FOREIGN KEY (FUELEXTCODE) REFERENCES WARES (CODE);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_3 FOREIGN KEY (PAYMENTMODEEXTCODE) REFERENCES PAYMENTMODES (CODE);
ALTER TABLE OUTCOMESBYRETAIL ADD CONSTRAINT FK_OUTCOMESBYRETAIL_4 FOREIGN KEY (PARTNEREXTCODE) REFERENCES CONTRAGENTS (CODE);
ALTER TABLE TANKS ADD CONSTRAINT FK_TANKS_1 FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS (ID);


/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE UNIQUE INDEX SESSIONS_IDX1 ON SESSIONS (AZSCODE, SESSIONNUM, STARTDATETIME);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: INCOMESBYDISCHARGE_BI */
CREATE TRIGGER INCOMESBYDISCHARGE_BI FOR INCOMESBYDISCHARGE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_incomesbydischarge_id,1);
end
^


/* Trigger: ITEMOUTCOMESBYRETAIL_BI */
CREATE TRIGGER ITEMOUTCOMESBYRETAIL_BI FOR ITEMOUTCOMESBYRETAIL
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_itemoutcomesbyretail_id,1);
end
^


/* Trigger: OBO_TRUNCCODES_BI */
CREATE TRIGGER OBO_TRUNCCODES_BI FOR OUTCOMESBYOFFICE
INACTIVE BEFORE INSERT POSITION 0
AS
    declare n int;
begin
  /* Trigger text */
  n = char_length(new.fuelextcode);
  if (:n > 11) then
  begin
    new.fuelextcode = substring(new.fuelextcode from (:n - 10) for 11);
  end
end
^


/* Trigger: OBR_TRUNCCODES_BI */
CREATE TRIGGER OBR_TRUNCCODES_BI FOR OUTCOMESBYRETAIL
INACTIVE BEFORE INSERT POSITION 0
AS
    declare n int;
begin
  /* Trigger text */
  n = char_length(new.fuelextcode);
  if (:n > 11) then
  begin
    new.fuelextcode = substring(new.fuelextcode from :n - 10 for 11);
  end
end
^


/* Trigger: ORDERS_BI */
CREATE TRIGGER ORDERS_BI FOR ORDERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_orders_id,1);
end
^


/* Trigger: OUTCOMESBYOFFICE_BI */
CREATE TRIGGER OUTCOMESBYOFFICE_BI FOR OUTCOMESBYOFFICE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_outcomesbyoffice_id,1);
end
^


/* Trigger: OUTCOMESBYRETAIL_BI */
CREATE TRIGGER OUTCOMESBYRETAIL_BI FOR OUTCOMESBYRETAIL
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_outcomesbyretail_id,1);
end
^


/* Trigger: SESSIONS_BI */
CREATE TRIGGER SESSIONS_BI FOR SESSIONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_sessions_id,1);
end
^

SET TERM ; ^



/******************************************************************************/
/*                            Fields descriptions                             */
/******************************************************************************/

DESCRIBE FIELD ITEMGRPEXTCODE TABLE ITEMOUTCOMESBYRETAIL
'" РђР—РЎ" + azscode';

DESCRIBE FIELD ITEMCODE TABLE ITEMOUTCOMESBYRETAIL
'icode in @items@';

DESCRIBE FIELD FUELNAME TABLE OUTCOMESBYRETAIL
'doubles, no need';

DESCRIBE FIELD PAYMENTMODENAME TABLE OUTCOMESBYRETAIL
'see table  paymentmodes';

DESCRIBE FIELD FUELEXTCODE TABLE OUTCOMESBYRETAIL
'link to wares, 1C ware code';

DESCRIBE FIELD PAYMENTMODEEXTCODE TABLE OUTCOMESBYRETAIL
'to table paymentmodes';

DESCRIBE FIELD PARTNEREXTCODE TABLE OUTCOMESBYRETAIL
'1C code, link to contragents';

DESCRIBE FIELD REMARK TABLE OUTCOMESBYRETAIL
'wtf?';

